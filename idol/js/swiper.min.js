define("./app", ["../lib/glue.min", "./component/dialog/PopupDialog", "./component/dialog/LoadingDialog", "./component/mask/Mask", "./component/draw/DrawButton", "./component/draw/Shake", "./component/draw/Turntable", "./component/draw/DrawPanel", "./component/draw/Speeddial", "./component/draw/Slotmachines", "./component/button/InfoButton", "./component/button/ChargeButton", "./component/button/ShareButton", "./component/button/LoginGroup", "./component/button/ShowAllGroup", "./component/carousel/Carousel", "./component/carousel/PictureViewer", "./component/carousel/Prizer", "./component/carousel/CommonPrizer", "./component/date/Countdown", "./component/composite/PhoneForm", "./behavior/NoLogin", "./behavior/Reserve", "./behavior/Dialog"], function(require, exports, module) {
	require("../lib/glue.min");
	require("./component/dialog/PopupDialog");
	require("./component/dialog/LoadingDialog");
	require("./component/mask/Mask");
	require("./component/draw/DrawButton");
	require("./component/draw/Shake");
	require("./component/draw/Turntable");
	require("./component/draw/DrawPanel");
	require("./component/draw/Speeddial");
	require("./component/draw/Slotmachines");
	require("./component/button/InfoButton");
	require("./component/button/ChargeButton");
	require("./component/button/ShareButton");
	require("./component/button/LoginGroup");
	require("./component/button/ShowAllGroup");
	require("./component/carousel/Carousel");
	require("./component/carousel/PictureViewer");
	require("./component/carousel/Prizer");
	require("./component/carousel/CommonPrizer");
	require("./component/date/Countdown");
	require("./component/composite/PhoneForm");
	require("./behavior/NoLogin");
	require("./behavior/Reserve");
	require("./behavior/Dialog");
	window.deviceInfo = {};
	if (window.iqiyi && window.navigator.userAgent.indexOf("IqiyiApp") >= 0) {
		iqiyi.ready(function(flag) {
			if (flag) {
				iqiyi.init(function(result) {
					window.deviceInfo = result.data || {};
					glue.init();
					return
				})
			} else {
				glue.init()
			}
		})
	} else {
		glue.init()
	}
});
define("../lib/glue.min", [], function(require, exports, module) {
	window.glue = {};
	(function() {
		glue.COMPONENTS = {};
		glue.COMPS = {};
		glue.OBJ_POINTER = [];
		glue.SERVICES = {};
		glue.BEHAVIORS = {};
		glue.$ = window.jQuery || window.Zepto;
		glue.idSeed = 0;
		glue.isReady = false;
		glue.readyCall = [];
		glue.readyMsg = [];
		glue.debug = false;
		glue.console = window.console || {
			log: function(message) {
				alert(message)
			}
		};
		glue.ERROR_FORMAT = "error: {0} [name={1}] {2}";
		glue.DUPLICATED_DEFINE = "duplicated define component";
		glue.DUPLICATED_CREATE_COMPONENT = "duplicated create component";
		glue.DUPLICATED_CREATE_SERVICE = "duplicated create service";
		glue.DUPLICATED_CREATE_BEHAVIOR = "duplicated create behavior";
		glue.INIT_COMPONENT_ERROR = "init component failed";
		glue.GET_COMPS_ERROR = "get comps failed";
		glue.INVALID_DATA = "invalid data";
		glue.NAMEOFSERVICE = "SERVICE";

		function createConstructor(name) {
			function constructor() {
				merge(this, this.self.$attribute)
			}
			constructor.$className = name;
			return constructor
		}
		function createClass(name, members) {
			var cls = createConstructor(name);
			var prototype = cls.prototype = {};
			prototype.self = cls;
			cls.$attribute = {};
			addMembers(cls, members, true, true);
			return cls
		}
		function addMembers(cls, members, isProto, isClass) {
			var target = isProto ? cls.prototype : cls;
			members = members || {};
			for (name in members) {
				if (members.hasOwnProperty(name)) {
					var member = members[name];
					if (name == "static") {
						addMembers(cls, member);
						continue
					} else if (typeof member == "function") {
						member.$owner = cls;
						member.$name = name
					} else if (isClass) {
						cls.$attribute[name] = member;
						continue
					}
					target[name] = member
				}
			}
		}
		function getClass(obj, name) {
			if (!name) {
				return null
			}
			var comp = obj;
			var names = name.split(".");
			while (name = names.shift()) {
				comp = comp[name];
				if (!comp) {
					return null
				}
			}
			return comp
		}
		function setClass(obj, name, cls) {
			if (!name || !cls) {
				return
			}
			var comp = obj;
			var names = name.split(".");
			var length = names.length - 1;
			for (var i = 0; i < length; i++) {
				name = names[i];
				if (!comp[name]) {
					comp[name] = {}
				}
				comp = comp[name]
			}
			return comp[names[length]] = cls
		}
		function removeClass(obj, name) {
			if (!name) {
				return
			}
			var comp = obj;
			var names = name.split(".");
			var length = names.length - 1;
			for (var i = 0; i < length; i++) {
				name = names[i];
				if (!comp[name]) {
					return
				}
				comp = comp[name]
			}
			delete comp[names[length]]
		}
		function chain(obj) {
			merge(obj, obj.self.$attribute);
			return Object.create ? Object.create(obj) : function(object) {
				var fn = function() {};
				fn.prototype = object;
				var result = new fn();
				fn.prototype = null;
				return result
			}(obj)
		}
		function merge(target, obj) {
			return glue.$.extend(true, target, obj)
		}
		function mergeProto(target, obj) {
			glue.$.extend(true, target.prototype, obj.prototype);
			target.prototype.self = target;
			return target
		}
		function extend(sub, base) {
			var prototype = chain(base.prototype);
			glue.$.extend(true, prototype, sub.prototype);
			sub.prototype = prototype;
			sub.superclass = base.prototype
		}
		function format(string, data) {
			string = string || "";
			data = data || [];
			return data.length == 0 ? "" : string.replace(/\{(\d+)\}/g, function() {
				return data[arguments[1]] || ""
			})
		}
		function error() {
			var message = format(glue.ERROR_FORMAT, arguments);
			throw message
		}
		function find(node, name) {
			return node.find("[glue-" + name + "],[data-" + name + "]")
		}
		function parents(node, name) {
			return node.parents("[glue-" + name + "],[data-" + name + "]")
		}
		function attr(node, name) {
			return node.attr("glue-" + name) || node.attr("data-" + name)
		}
		var Model = createClass("Model", {
			"static": {
				getInstance: function(component) {
					return new Model().init(component)
				}
			},
			fields: null,
			component: null,
			init: function(component) {
				this.component = component;
				return this
			},
			updateModel: function() {
				this.fields = {};
				var rootElement = this.component.rootElement;
				var cloneComp = rootElement.clone();
				find(cloneComp, "component").remove();
				var html = cloneComp.prop("outerHTML");
				var reg = /(\S+)="[^="]*?\{\{(.*?)\}\}.*?"|(glue-bind)="(.*?)"/gi;
				var tag = {};
				var r = reg.exec(html);
				while (r) {
					if (!tag[r[0]]) {
						tag[r[0]] = true;
						var key = r[1] || r[3];
						var value = glue.$.trim(r[2] || r[4]);
						var type = key == "class" ? "style" : key == "glue-bind" ? "value" : "attribute";
						var node = rootElement.find("[" + r[0] + "]");
						this.fields[value] = {
							node: node.length == 0 ? rootElement : node,
							type: type,
							name: key,
							value: ""
						}
					}
					r = reg.exec(html)
				}
			},
			updateField: function(data) {
				var length = this.fields.length;
				for (var key in this.fields) {
					var field = this.fields[key];
					var value = getClass(data, key);
					if (!value || value == field.value) {
						continue
					}
					if (field.type == "style") {
						field.node.removeClass("{{" + key + "}}").removeClass(field.value).addClass(value)
					} else if (field.type == "attribute") {
						field.node.attr(field.name, value)
					} else if (field.type == "value") {
						field.node.html(value)
					}
					field.value = value
				}
			},
			update: function(data) {
				if (!glue.$.isPlainObject(data)) {
					error(glue.INVALID_DATA, "not a plain object")
				}
				this.updateField(data)
			}
		});
		var Base = glue.COMPONENTS["Base"] = createClass("Base", {
			autoInit: true,
			rootElement: null,
			nodes: null,
			listeners: null,
			messages: null,
			init: function() {},
			bindEvent: function() {
				var me = this;
				var listeners = this.listeners || {};
				for (var ls in listeners) {
					var fn = null;
					if ((fn = listeners[ls]) && typeof fn == "function") {
						me.addDomListener(ls, function(e) {
							var ref = attr(me.rootElement, "node-ref");
							var element = glue.$(e.target);
							while (me != element.prop("owner") && !attr(element, "node") && !attr(element, "type")) {
								if (ref && (ref = glue.$.trim(ref)) && (element.prop("tagName").toLowerCase() == ref.toLowerCase() || element.hasClass(ref))) {
									element.$ref = true;
									break
								}
								element = element.parent()
							}
							fn.call(me, e, element, attr(element, "node") || attr(element, "type") || element.$ref && ref || null)
						})
					}
				}
			},
			destroy: function() {
				glue.destroy(this.id)
			},
			onMessage: function(name, data) {},
			callParent: function(args) {
				var method = this.callParent.caller;
				return method.$owner.superclass[method.$name].apply(this, args || [])
			},
			updateComponentNodes: function() {
				var me = this;
				var nodes = find(me.rootElement, "node").toArray().filter(function(oItem) {
					var parentComps = parents(glue.$(oItem), "component");
					return parentComps[0] == me.rootElement[0] ? true : false
				});
				me.nodes = {};
				var length = nodes.length;
				for (var i = 0; i < length; i++) {
					var node = glue.$(nodes[i]);
					me.nodes[attr(node, "node")] = node
				}
			},
			updateNodes: function(options) {
				this.updateComponentNodes();
				this.model.updateModel();
				glue.initComponent(this.rootElement, options)
			}
		});
		var Event = glue.COMPONENTS["Event"] = createClass("Event", {
			addDomListener: function(name, selector, fn) {
				var dom = this.rootElement;
				window.jQuery ? dom.delegate.apply(dom, arguments) : dom.on.apply(dom, arguments);
				return this
			},
			removeDomListener: function(name, selector, fn) {
				var dom = this.rootElement;
				window.jQuery ? dom.undelegate.apply(dom, arguments) : dom.off.apply(dom, arguments);
				return this
			}
		});
		mergeProto(Base, Event);
		glue.define = function(name, members) {
			var cls = getClass(glue.COMPONENTS, name);
			if (!cls) {
				members = members || {};
				cls = createClass(name, members);
				extend(cls, getClass(glue.COMPONENTS, "Base"));
				setClass(glue.COMPONENTS, name, cls);
				return cls
			}
			error(glue.DUPLICATED_DEFINE, name);
			return null
		};
		glue.create = function(rootElement, options) {
			var name = attr(rootElement, "component");
			var cls = getClass(glue.COMPONENTS, name);
			if (cls) {
				var oComp = getClass(glue.COMPS, attr(rootElement, "id"));
				if (oComp && oComp.rootElement != rootElement) {
					oComp.destroy();
					oComp = null
				}
				if (!oComp) {
					cls = new cls();
					addMembers(cls, options || {});
					var id = attr(rootElement, "id") || rootElement.attr("id") || name + "_" + glue.idSeed++;
					cls.id = id;
					rootElement.attr("glue-id", id);
					setClass(glue.COMPS, id, cls);
					glue.OBJ_POINTER.push(cls);
					rootElement.prop("owner", cls);
					cls.rootElement = rootElement;
					cls.model = Model.getInstance(cls);
					cls.updateNodes()
				} else {
					error(glue.DUPLICATED_CREATE_COMPONENT, name);
					cls = null
				}
			}
			return cls
		};
		glue.destroy = function(id) {
			var comp = getClass(glue.COMPS, id);
			if (comp) {
				comp.rootElement.remove();
				removeClass(glue.COMPS, id);
				var length = glue.OBJ_POINTER.length;
				for (var i = 0; i < length; i++) {
					if (glue.OBJ_POINTER[i] == comp) {
						glue.OBJ_POINTER.splice(i, 1);
						break
					}
				}
			} else {
				error(glue.GET_COMPS_ERROR, id)
			}
		};
		glue.getComponentInstance = function(id) {
			if (typeof id != "string") {
				id = attr(glue.$(id), "id") || glue.$(id).attr("id")
			}
			return getClass(glue.COMPS, id)
		};
		glue.createService = function(members) {
			if (arguments.length == 0) {
				return null
			}
			var name = glue.NAMEOFSERVICE + glue.idSeed++;
			members = members || {};
			if (name && !getClass(glue.SERVICES, name)) {
				var service = {};
				addMembers(service, members || {});
				setClass(glue.SERVICES, name, service);
				return service
			} else {
				error(glue.DUPLICATED_CREATE_SERVICE, name);
				return null
			}
		};
		glue.createBehavior = function(name, fn) {
			if (!fn) {
				return
			}
			if ( !! name && !getClass(glue.BEHAVIORS, name)) {
				setClass(glue.BEHAVIORS, name, fn);
				if (typeof fn == "object") {
					glue.OBJ_POINTER.push(fn)
				}
			} else {
				error(glue.DUPLICATED_CREATE_BEHAVIOR, name)
			}
		};
		glue.postMessage = function(name, data) {
			if (!glue.isReady) {
				glue.readyMsg.push({
					name: name,
					data: data
				});
				return
			}
			name = name instanceof Array ? name : [name];
			var length = glue.OBJ_POINTER.length;
			for (var i = 0; i < length; i++) {
				var obj = glue.OBJ_POINTER[i];
				if (obj.message instanceof Array && obj.onMessage) {
					for (var j in name) {
						if (obj.message.indexOf(name[j]) >= 0) {
							obj.onMessage(name[j], data)
						}
					}
				}
			}
		};
		glue.ready = function(fn) {
			if (glue.isReady) {
				fn.call()
			} else if (typeof fn == "function") {
				glue.readyCall.push(fn)
			}
		};
		glue.initComponent = function(root, options) {
			root = glue.$(root);
			options = options || {};
			var comps = find(root, "component");
			var length = comps.length;
			for (var i = 0; i < length; i++) {
				var comp = glue.$(comps[i]);
				var obj = comp.prop("owner");
				if (!obj) {
					obj = glue.create(comp, options[attr(comp, "id")])
				}
				if (obj && !obj.$init) {
					if (obj.autoInit) {
						if (glue.debug) {
							obj.init()
						} else {
							try {
								obj.init()
							} catch (e) {
								error(glue.INIT_COMPONENT_ERROR, attr(comp, "component"), e.message)
							}
						}
					}
					obj.bindEvent();
					obj.$init = true;
					var behavior = attr(comp, "behavior");
					if (behavior) {
						initBehavior(behavior, obj)
					}
				}
			}
		}, glue.init = function(options) {
			glue.$(document).ready(function() {
				options = options || {};
				glue.debug = !! options.debug;
				delete options.debug;
				glue.initComponent(glue.$("body"), options);
				done()
			})
		};

		function initBehavior(behavior, instance) {
			var behaviors = behavior.replace(/,/g, ";").split(";");
			for (var i in behaviors) {
				behavior = getClass(glue.BEHAVIORS, glue.$.trim(behaviors[i]));
				if (typeof behavior == "function") {
					behavior.call(instance)
				} else if (typeof behavior == "object" && typeof behavior.init == "function") {
					behavior.init.call(instance)
				}
			}
		}
		function done() {
			glue.isReady = true;
			while (fn = glue.readyCall.shift()) {
				fn.call()
			}
			for (i in glue.readyMsg) {
				var msg = glue.readyMsg[i];
				glue.postMessage(msg.name, msg.data)
			}
		}
	})(glue)
});
define("./component/dialog/PopupDialog", ["../../../lib/glue.min", "./feature/common", "./feature/again", "./feature/submit", "./feature/link", "./feature/bind", "./feature/charge", "./feature/pay"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.dialog.PopupDialog", {
		message: ["POPUPDIALOG_SHOW", "POPUPDIALOG_REMOVE"],
		onMessage: function(name, data) {
			if (name == "POPUPDIALOG_SHOW") {
				var tplId = data.dataCodeSend + data.code;
				this.show(tplId, data)
			} else if (name == "POPUPDIALOG_REMOVE") {
				var dialogs = glue.$("[data-dialog=dialog]");
				dialogs.remove()
			}
		},
		init: function() {
			this.features = {
				common: require("./feature/common"),
				again: require("./feature/again"),
				submit: require("./feature/submit"),
				link: require("./feature/link"),
				bind: require("./feature/bind"),
				charge: require("./feature/charge"),
				pay: require("./feature/pay")
			}
		},
		show: function(tplId, data) {
			var me = this;
			var node = null;
			if (data.code == "Q00703") {
				var daysurpluschance = data.data.daysurpluschance;
				if (daysurpluschance) {
					daysurpluschance = parseInt(daysurpluschance) > 0 ? 1 : 0
				}
				var realTplId = data.dataCodeSend + data.code + daysurpluschance;
				node = glue.$('[data-vipactive-tpl="' + realTplId + '"]')
			} else if (data.code == "A00000") {
				var gifttype = data.data.gifttype;
				var realTplId = data.dataCodeSend + data.code + gifttype;
				node = glue.$('[data-vipactive-tpl="' + realTplId + '"]')
			} else if (data.code == "Q00382") {
				var conditionId = data.data.conditionId;
				var realTplId = data.dataCodeSend + data.code + conditionId;
				node = glue.$('[data-vipactive-tpl="' + realTplId + '"]')
			}
			if (!node || node.length == 0) {
				node = glue.$('[data-vipactive-tpl="' + tplId + '"]');
				if (node.length == 0) {
					if (data.code == "Q00901" || data.code == "Q00902") {
						var url = data.data.redirect_url || "";
						var fn = url.match(/^fn:(.*)/);
						if (fn && (fn = window[fn[1]])) {
							typeof fn == "function" && fn.call()
						} else {
							window.location.href = url
						}
					}
					return
				}
			}
			var feature = me.features[node.attr("data-feature") || "common"];
			if (!feature) {
				return
			}
			node = Mustache.render(glue.$(node[0]).text(), data.data);
			node = glue.$("body").append(node).children().last();
			node.attr("data-dialog", "dialog");
			feature.init(node, data)
		}
	})
});
define("./component/dialog/feature/common", ["../../../../lib/glue.min"], function(require, exports, module) {
	require("../../../../lib/glue.min");
	module.exports = {
		init: function(self, data) {
			self.find("a").on("click", function(e) {
				self.remove();
				glue.postMessage("MASK_HIDE");
				var nextDialog = $(e.target).attr("data-next-dialog");
				if (nextDialog) {
					e.preventDefault();
					glue.postMessage("POPUPDIALOG_SHOW", {
						dataCodeSend: data.dataCodeSend,
						code: nextDialog
					})
				}
			});
			glue.postMessage("MASK_SHOW");
			if (data.code == "Q00901") {
				self.find("a.btn-confirm").attr("href", data.data.redirect_url)
			}
			self.css("display", "block")
		}
	}
});
define("./component/dialog/feature/again", ["../../../../lib/glue.min"], function(require, exports, module) {
	require("../../../../lib/glue.min");
	module.exports = {
		init: function(self, data) {
			self.find("a").on("click", function(e) {
				self.remove();
				glue.postMessage("MASK_HIDE");
				if (glue.$(e.target).hasClass("ff-close")) {
					return
				}
				glue.postMessage("DRAW_AGAIN", {
					code: data.dataCodeSend
				})
			});
			glue.postMessage("MASK_SHOW");
			self.css("display", "block")
		}
	}
});
define("./component/dialog/feature/submit", ["../../../../lib/glue.min", "../../../service/remote/remote", "../../../service/user/user"], function(require, exports, module) {
	require("../../../../lib/glue.min");
	var remote = require("../../../service/remote/remote");
	var user = require("../../../service/user/user");
	module.exports = {
		init: function(self, data) {
			var me = this;
			self.find("a").on("click", function(e) {
				if (glue.$(e.target).hasClass("ff-close")) {
					if (self.nodes.cover.length > 0) {
						self.nodes.cover.css("display", "block");
						return
					}
					self.remove();
					glue.postMessage("MASK_HIDE");
					return
				}
				if (glue.$(e.target).attr("glue-node")) {
					return
				}
				me.submit(self, data.dataCodeGet, data.dataCodeSend)
			});
			self.find('[data-vipyes-elem="error"]').css("display", "block");
			glue.postMessage("MASK_SHOW");
			me.owner = self;
			self.nodes = {
				uname: self.find('[glue-node="name"]'),
				mobile: self.find('[glue-node="phone"]'),
				dz: self.find('[glue-node="address"]'),
				errorMsg: self.find('[glue-node="errorMsg"]'),
				cover: self.find('[glue-node="cover"]'),
				cancel: self.find('[glue-node="cancel"]'),
				goon: self.find('[glue-node="continue"]'),
				clear: self.find('[glue-node="clear"]')
			};
			if (self.nodes.cover.length > 0) {
				self.nodes.cancel.on("click", function() {
					self.nodes.cover.css("display", "none");
					self.remove();
					glue.postMessage("MASK_HIDE");
					return
				});
				self.nodes.goon.on("click", function(e) {
					self.nodes.cover.css("display", "none")
				})
			}
			if (self.nodes.uname.length > 0) {
				self.css("display", "block")
			} else {
				user.getUserInfo(function(data) {
					if (data != null) {
						var phone = data.userinfo.phone;
						self.nodes.mobile.val(phone || "")
					}
					self.css("display", "block")
				})
			}
			if (self.nodes.clear.length > 0) {
				self.nodes.clear.on("click", function() {
					self.nodes.mobile.val("")
				})
			}
		},
		submit: function(node, dataCodeGet, dataCodeSend) {
			var me = this;
			var nodes = me.owner.nodes;
			nodes.errorMsg.css("display", "none");
			var data = {};
			for (var key in nodes) {
				if (nodes.hasOwnProperty(key)) {
					if (key == "errorMsg" || key == "cover" || key == "cancel" || key == "goon" || key == "clear" || nodes[key].length == 0 || nodes[key].css("display") == "none") {
						continue
					}
					var value = glue.$.trim(nodes[key].val() || nodes[key].text());
					if (value == "") {
						nodes.errorMsg.text("不能有空值");
						nodes.errorMsg.css("display", "block");
						return
					} else if (key == "mobile" && (value.length != 11 || !value.match(/^1[34578]\d{9}$/))) {
						nodes.errorMsg.text("手机号码有误");
						nodes.errorMsg.css("display", "block");
						return
					}
					data[key] = value
				}
			}
			if (data["mobile"]) {
				remote.send(dataCodeGet, data, function(data) {
					if (data.code == "A00000") {
						data.dataCodeSend = dataCodeGet;
						node.remove();
						glue.postMessage("MASK_HIDE");
						glue.postMessage("POPUPDIALOG_SHOW", data)
					} else {
						nodes.errorMsg.text(data.msg);
						nodes.errorMsg.css("display", "block")
					}
				})
			}
		}
	}
});
define("./service/remote/remote", ["../../../lib/glue.min", "../pingback/pingback"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var pingback = require("../pingback/pingback");
	module.exports = glue.createService({
		send: function(code, data, callback) {
			data = data || {};
			var url = "https://act.vip.iqiyi.com/api/process-jsonp.action?pid=97ae2982356f69d8&cid=afbe8fd3d73448c9";
			var interfaceCode = null;
			if (typeof code == "string") {
				data.interfaceCode = code;
				interfaceCode = code;
				pingback.sendPingback("vipmarketing_" + code)
			} else if (typeof code == "object" && code.url) {
				url = code.url;
				if (code.interfaceCode) {
					interfaceCode = code.interfaceCode;
					data.interfaceCode = interfaceCode;
					pingback.sendPingback("vipmarketing_" + interfaceCode)
				}
			} else {
				return
			}
			data.dfp = window.deviceInfo.dfp || "";
			data.deviceID = window.deviceInfo.qyID || "";
			glue.$.ajax({
				url: url,
				dataType: "jsonp",
				data: data,
				success: function(data) {
					if (interfaceCode) {
						code = data.data ? data.data.code : data.code;
						pingback.sendPingback("vipmarketing_" + interfaceCode + "_" + code)
					}
					if (typeof callback == "function") {
						callback.call(null, data.data && data.data.code ? data.data : data)
					}
				},
				error: function(xhr, data) {}
			})
		}
	})
});
define("./service/pingback/pingback", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	module.exports = glue.createService({
		send: function(options, url) {
			var arr = [];
			for (var i in options) {
				arr.push(encodeURIComponent(i) + "=" + encodeURIComponent(options[i]))
			}
			var image = new Image();
			url = url || "//msg.video.qiyi.com/jpb.gif";
			image.src = url + "?" + arr.join("&")
		},
		sendPingback: function(rseat) {
			this.send({
				t: 20,
				pf: 2,
				p: 20,
				p1: 201,
				rseat: rseat,
				u: this.get_uid(),
				pu: this.get_ppuid(),
				rn: new Date().getTime()
			}, "//msg.iqiyi.com/b")
		},
		get_uid: function() {
			var uid = glue.$.cookie.get("QC006");
			if (!uid) {
				uid = "u" + new Date().getTime();
				glue.$.cookie.set("QC006", uid, {
					expires: 365 * 24 * 3600 * 1e3,
					path: "/",
					domain: "iqiyi.com"
				})
			}
			return uid
		},
		get_ppuid: function() {
			return JSON.parse(glue.$.cookie.get("P00002") || "{}").uid || ""
		}
	})
});
define("./service/user/user", ["../../../lib/glue.min", "../pingback/pingback"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var pingback = require("../pingback/pingback");
	module.exports = glue.createService({
		isLogin: function(code) {
			if (!glue.$.cookie.get("P00001")) {
				var me = this;
				if (code) {
					pingback.sendPingback("vipmarketing_" + code);
					setTimeout(function() {
						me.login()
					}, 500)
				} else {
					me.login()
				}
				return false
			}
			return true
		},
		login: function() {
			var ua = window.navigator.userAgent;
			if (ua.indexOf("IqiyiApp/iqiyichild") >= 0 || ua.indexOf("qiyichild") >= 0) {
				window.location.href = "iqiyichildweb://gotologinview"
			} else if (ua.indexOf("IqiyiApp") >= 0) {
				window.location.href = "iqiyi://login"
			} else {
				window.location.href = "//m.iqiyi.com/user.html?onestepoff=1&redirect_url=" + encodeURIComponent(window.location.href)
			}
		},
		logout: function() {
			window.location.href = "//passport.iqiyi.com/user/logout.php?authcookie=" + glue.$.cookie.get("P00001") + "&agenttype=5&url=" + encodeURIComponent(window.location.href)
		},
		getUserInfo: function(callback) {
			if (typeof callback != "function") {
				return
			}
			glue.$.ajax({
				type: "POST",
				url: "https://passport.iqiyi.com/apis/user/info.action?authcookie=" + glue.$.cookie.get("P00001"),
				dataType: "json",
				crossDomain: true,
				beforeSend: function(xhr, settings) {
					xhr.withCredentials = true
				},
				data: window.deviceInfo.qyID || null,
				success: function(data) {
					if (data.code == "A00000") {
						callback(data.data)
					} else {
						callback(null)
					}
				},
				error: function(xhr, data) {
					callback(null)
				}
			})
		}
	})
});
define("./component/dialog/feature/link", ["../../../../lib/glue.min"], function(require, exports, module) {
	require("../../../../lib/glue.min");
	module.exports = {
		init: function(self, data) {
			var href = self.attr("href") || self.find("a").attr("href");
			if (href) {
				window.location.href = href
			}
		}
	}
});
define("./component/dialog/feature/bind", ["../../../../lib/glue.min", "../../../service/remote/remote"], function(require, exports, module) {
	require("../../../../lib/glue.min");
	var remote = require("../../../service/remote/remote");
	module.exports = {
		init: function(self, data) {
			var me = this;
			self.find("a").on("click", function(e) {
				if (glue.$(e.target).hasClass("ff-close")) {
					self.remove();
					glue.postMessage("MASK_HIDE");
					return
				} else if (!glue.$(e.target).attr("glue-node")) {
					me.bind(self, data.dataCodeGet, data.dataCodeSend)
				}
			});
			glue.postMessage("MASK_SHOW");
			if (!me.isThirdAccount()) {
				self.find('[glue-node="password"]').parent("li").css("display", "none")
			}
			self.css("display", "block");
			me.owner = self;
			self.nodes = {
				phone: self.find('[glue-node="phone"]'),
				errorMsg: self.find('[glue-node="errorMsg"]'),
				password: self.find('[glue-node="password"]'),
				validCode: self.find('[glue-node="validCode"]'),
				validButton: self.find('[glue-node="validButton"]'),
				vCode: self.find('[glue-node="vCode"]'),
				vButton: self.find('[glue-node="vButton"]')
			};
			self.nodes.validButton.one("click", me.getValid.bind(me));
			me.getCode()
		},
		getCode: function() {
			var me = this;
			var owner = me.owner;
			var url = "https://passport.iqiyi.com/apis/register/vcode.action" + "?width=" + parseInt(owner.nodes.vButton.width()) + "&static=1" + "&timestamp=" + new Date().getTime();
			owner.nodes.vButton.attr("src", url);
			setTimeout(function() {
				owner.nodes.vButton.one("click", me.getCode.bind(me))
			}, 500)
		},
		isThirdAccount: function() {
			var P00002 = null;
			var email = "";
			var cookie = glue.$.cookie.get("P00002");
			if (cookie) {
				P00002 = JSON.parse(cookie);
				email = P00002.email;
				var isEmail = /^[0-9a-zA-Z_][-_\.0-9a-zA-Z-]{0,31}@([0-9a-zA-Z][0-9a-zA-Z-]*\.)+[a-zA-Z]{2,4}$/.test(email.trim());
				if (isEmail) {
					return false
				}
			}
			return true
		},
		getValid: function() {
			var me = this;
			var owner = me.owner;
			var phone = glue.$.trim(owner.nodes.phone.val());
			var vCode = glue.$.trim(owner.nodes.vCode.val());
			var errorMsg = owner.nodes.errorMsg;
			var validButton = owner.nodes.validButton;
			errorMsg.css("display", "none");
			if (phone.length != 11 || !phone.match(/^1[34578]\d{9}$/)) {
				errorMsg.text("手机号码有误");
				errorMsg.css("display", "block");
				validButton.one("click", me.getValid.bind(me))
			} else if (vCode == "") {
				errorMsg.text("图文验证码有误");
				errorMsg.css("display", "block");
				validButton.one("click", me.getValid.bind(me))
			} else {
				var data = {
					requestType: 3,
					cellphoneNumber: phone,
					serviceId: 2,
					vcode: vCode
				};
				remote.send({
					url: "https://passport.iqiyi.com/apis/phone/send_cellphone_authcode_vcode.action"
				}, data, function(data) {
					if (data.code == "A00000") {
						me.lastPhone = phone
					} else {
						errorMsg.text(data.msg);
						errorMsg.css("display", "block")
					}
					validButton.html("<span>60</span>秒后重试");
					var span = validButton.find("span");
					var time = 60;
					var timer = setInterval(function() {
						if (time <= 0) {
							validButton.text("获取验证码");
							validButton.one("click", me.getValid.bind(me));
							clearInterval(timer);
							return
						}
						time--;
						span.text(time)
					}, 1e3)
				})
			}
		},
		bind: function(node, dataCodeGet, dataCodeSend) {
			var me = this;
			if (me.flag) {
				return
			}
			me.flag = true;
			var owner = me.owner;
			var phone = glue.$.trim(owner.nodes.phone.val());
			var validCode = glue.$.trim(owner.nodes.validCode.val());
			var password = glue.$.trim(owner.nodes.password.val());
			var errorMsg = owner.nodes.errorMsg;
			errorMsg.css("display", "none");
			if (phone.length != 11 || !phone.match(/^1[34578]\d{9}$/)) {
				errorMsg.text("手机号码有误");
				errorMsg.css("display", "block");
				me.flag = false
			} else if (me.lastPhone && phone != me.lastPhone) {
				errorMsg.text("与接收验证码的手机号码不同");
				errorMsg.css("display", "block");
				me.flag = false
			} else if (validCode == "") {
				errorMsg.text("请输入验证码");
				errorMsg.css("display", "block");
				me.flag = false
			} else if (password == "" && me.isThirdAccount()) {
				errorMsg.text("密码不能为空");
				errorMsg.css("display", "block");
				me.flag = false
			} else {
				var modulus = "ab86b6371b5318aaa1d3c9e612a9f1264f372323c8c0f19875b5fc3b3fd3afcc1e5bec527aa94bfa85bffc157e4245aebda05389a5357b75115ac94f074aefcd";
				var exponent = "10001";
				var key = RSAUtils.getKeyPair(exponent, "", modulus);
				var data = {
					authCode: validCode,
					authcookie: glue.$.cookie.get("P00001"),
					cellphoneNumber: phone,
					serviceId: 2,
					agenttype: me.getAgentType(),
					requestType: 3,
					passwd: RSAUtils.encryptedString(key, encodeURIComponent(password)).replace(/\s/g, "-")
				};
				remote.send({
					url: "https://passport.iqiyi.com/apis/phone/direct_bind_phone.action"
				}, data, function(data) {
					if (data.code == "A00000") {
						node.remove();
						glue.postMessage("MASK_HIDE");
						glue.postMessage("DRAW_AGAIN", {
							code: dataCodeSend
						})
					} else {
						errorMsg.text(data.msg);
						errorMsg.css("display", "block")
					}
				});
				me.flag = false
			}
		},
		getAgentType: function() {
			var uAgent = navigator.userAgent.toLowerCase();
			var iphone = uAgent.match(/iphone/i) == "iphone";
			var ipad = uAgent.match(/ipad/i) == "ipad";
			var android = uAgent.match(/android/i) == "android";
			if (iphone) {
				return 12
			} else if (ipad) {
				return 10
			} else if (android) {
				return 13
			}
			return 0
		}
	}
});
define("./component/dialog/feature/charge", ["../../../../lib/glue.min", "../../../service/charge/charge"], function(require, exports, module) {
	require("../../../../lib/glue.min");
	var charge = require("../../../service/charge/charge");
	module.exports = {
		init: function(self, data) {
			self.find("a").on("click", function(e) {
				self.remove();
				glue.postMessage("MASK_HIDE");
				if (glue.$(e.target).hasClass("ff-close")) {
					return
				}
				charge.doCharge(null, glue.$(e.target).attr("data-param") || "")
			});
			glue.postMessage("MASK_SHOW");
			self.css("display", "block")
		}
	}
});
define("./service/charge/charge", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	module.exports = glue.createService({
		doCharge: function(defaultUrl, param) {
			var me = this;
			var type = me.getType();
			var version = me.getVersion();
			var share = me.getQueryString("share");
			var url = defaultUrl || "//serv.vip.iqiyi.com/order/preview.action?pid=a0226bd958843452";
			if (url.indexOf("?") < 0) {
				url += "?_=" + new Date().getTime()
			}
			var uAgent = navigator.userAgent.toLowerCase();
			var iphone = uAgent.match(/iphone/i) == "iphone";
			var ipad = uAgent.match(/ipad/i) == "ipad";
			var android = uAgent.match(/android/i) == "android";
			param = param != "" ? "&" + param : param;
			if (param.indexOf("fc") < 0) {
				var fc = me.getQueryString("fc");
				if (fc != null) {
					param += "&fc=" + fc
				} else {
					fc = $.cookie.get("QC009");
					param += fc != "" ? "&fc=" + fc : ""
				}
			}
			if (share == null && (iphone || ipad || android) && version && type) {
				version = parseFloat(version);
				if (type == "pps") {
					if (android && version >= 3.8) {
						url = "iqiyi-phone://tv.pps.mobile/res?pid=6" + param
					} else if (iphone || ipad) {
						if (version >= 4) {
							url = "pps-uni://com.qiyi.video/res?pid=6&page=list" + param
						} else {
							url = "//vip.iqiyi.com/viperrorinfoh5.html"
						}
					}
				} else if (type == "iqiyi") {
					if (iphone && version >= 6.5) {
						url = "iqiyi-phone://com.qiyi.video/res?pid=6&page=list" + param
					} else if (ipad && version >= 6.5) {
						url = "iqiyi-pad://com.qiyi.video/res?pid=6&page=list" + param
					} else if (android && version >= 6) {
						url = "iqiyi-phone://com.qiyi.video/res?pid=6" + param
					} else if (iphone || ipad) {
						url = "//vip.iqiyi.com/viperrorinfoh5.html"
					}
				} else if (type == "iqiyichild") {
					url = "iqiyichildweb://vippay" + (param.length > 0 ? "?" + param.substring(1) : "")
				}
			} else {
				url += url.indexOf("fc") < 0 ? param : "";
				me.setFv()
			}
			window.location.href = url
		},
		getQueryString: function(name) {
			var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
			var r = window.location.search.substr(1).match(reg);
			if (r != null) {
				return unescape(r[2])
			}
			return null
		},
		getType: function() {
			var type = this.getQueryString("type");
			if (!type) {
				var ua = window.navigator.userAgent;
				var value = ua.match(/IqiyiApp\/(\S*)/);
				if (value) {
					type = value[1]
				} else if (ua.indexOf("qiyichild") >= 0) {
					type = "iqiyichild"
				}
			}
			return type || "iqiyi"
		},
		getVersion: function(name) {
			var version = this.getQueryString("version");
			if (!version) {
				var ua = window.navigator.userAgent;
				var value = ua.match(/IqiyiVersion\/(\S*)/);
				if (value) {
					version = value[1]
				}
			}
			return version || null
		},
		setFv: function() {
			var fv = this.getQueryString("fv");
			if (fv == null) {
				return
			}
			fv = encodeURI(fv).substr(0, 146);
			$.cookie.set("QC142", fv, {
				path: "/",
				domain: ".iqiyi.com",
				expires: 3 * 24 * 60 * 60 * 1e3
			})
		}
	})
});
define("./component/dialog/feature/pay", ["../../../../lib/glue.min"], function(require, exports, module) {
	require("../../../../lib/glue.min");
	module.exports = {
		init: function(self, data) {
			self.find("a").on("click", function(e) {
				self.remove();
				glue.postMessage("MASK_HIDE");
				if (glue.$(e.target).hasClass("ff-close")) {
					return
				}
				var url = $(e.target).attr('data-href');
				url += url.indexOf('?') >= 0 ? '&' : '?';
				location.href = url + glue.$.url.getQueryValue(location.href, 'fv')
			});
			glue.postMessage("MASK_SHOW");
			var ua = window.navigator.userAgent.toLowerCase();
			if (ua.match(/MicroMessenger/i) != "micromessenger") {
				self.find("#weixinpay").remove()
			} else {
				self.find("#alipay").remove()
			}
			self.css("display", "block")
		}
	}
});
define("./component/dialog/LoadingDialog", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.dialog.LoadingDialog", {
		message: ["LOADINGDIALOG_SHOW", "LOADINGDIALOG_HIDE"],
		onMessage: function(name, data) {
			if (name == "LOADINGDIALOG_SHOW") {
				this.rootElement.css("display", "block");
				glue.postMessage("MASK_SHOW")
			} else if (name == "LOADINGDIALOG_HIDE") {
				this.rootElement.css("display", "none");
				glue.postMessage("MASK_HIDE")
			}
		}
	})
});
define("./component/mask/Mask", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.mask.Mask", {
		message: ["MASK_SHOW", "MASK_HIDE"],
		onMessage: function(name, data) {
			if (name == "MASK_SHOW") {
				this.rootElement.css("display", "block")
			} else if (name == "MASK_HIDE") {
				this.rootElement.css("display", "none")
			}
		}
	})
});
define("./component/draw/DrawButton", ["../../../lib/glue.min", "../../service/user/user", "../../service/remote/remote"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var user = require("../../service/user/user");
	var remote = require("../../service/remote/remote");
	glue.define("activity.component.draw.DrawButton", {
		shouldLogin: true,
		message: ["DRAW_AGAIN"],
		onMessage: function(name, data) {
			if (name == "DRAW_AGAIN" && this.rootElement.attr("data-code-send") == data.code) {
				this.rootElement.off("click");
				this.handler()
			}
		},
		init: function() {
			var me = this;
			var root = me.rootElement;
			me._handler = me.handler.bind(me);
			root.one("click", me._handler)
		},
		handler: function() {
			var me = this;
			var root = me.rootElement;
			if (me.shouldLogin && !user.isLogin(root.attr("data-code-send"))) {
				root.one("click", me._handler);
				return
			}
			me.execute()
		},
		execute: function() {
			var me = this;
			var root = me.rootElement;
			glue.postMessage("LOADINGDIALOG_SHOW");
			var dataCodeSend = root.attr("data-code-send");
			var dataCodeGet = root.attr("data-code-get");
			remote.send(dataCodeSend, {}, function(data) {
				glue.postMessage("LOADINGDIALOG_HIDE");
				data.dataCodeSend = dataCodeSend;
				data.dataCodeGet = dataCodeGet;
				glue.postMessage("POPUPDIALOG_SHOW", data);
				root.one("click", me._handler)
			})
		}
	})
});
define("./component/draw/Shake", ["../../../lib/glue.min", "../../service/user/user", "../../service/remote/remote"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var user = require("../../service/user/user");
	var remote = require("../../service/remote/remote");
	glue.define("activity.component.draw.Shake", {
		init: function() {
			var me = this;
			if (window.DeviceMotionEvent) {
				var config = {
					callback: function() {
						if (!window.shakeObj.valid) {
							return
						}
						window.shakeObj.valid = false;
						if (!user.isLogin(me.rootElement.attr("data-code-send"))) {
							return
						}
						glue.postMessage("POPUPDIALOG_REMOVE");
						glue.postMessage("LOADINGDIALOG_SHOW");
						var dataCodeSend = me.rootElement.attr("data-code-send");
						var dataCodeGet = me.rootElement.attr("data-code-get");
						remote.send(dataCodeSend, {}, function(data) {
							glue.postMessage("LOADINGDIALOG_HIDE");
							data.dataCodeSend = dataCodeSend;
							data.dataCodeGet = dataCodeGet;
							glue.postMessage("POPUPDIALOG_SHOW", data);
							setTimeout(function() {
								window.shakeObj.valid = true
							}, me.rootElement.attr("data-delay") || 3e3)
						})
					},
					valid: true
				};
				this.setShakeConfig(config);
				window.shakeObj = config;
				window.addEventListener("devicemotion", this.deviceMotionHandler, false)
			}
		},
		setShakeConfig: function(config) {
			config.diff = config.diff || 100;
			config.threshold = config.threshold || 3;
			config.enlarge = config.enlarge || 10;
			config.last_update = 0;
			config.last_x = 0;
			config.last_y = 0;
			config.last_z = 0
		},
		deviceMotionHandler: function(e) {
			var acceleration = e.accelerationIncludingGravity;
			var curTime = new Date().getTime();
			with(window.shakeObj) {
				if (valid && curTime - last_update > diff) {
					var diffTime = curTime - last_update;
					last_update = curTime;
					x = acceleration.x;
					y = acceleration.y;
					z = acceleration.z;
					var speed = Math.abs(x + y + z - last_x - last_y - last_z) / diffTime * enlarge;
					if (speed >= threshold) {
						if (typeof callback == "function") {
							callback()
						}
					}
					last_x = x;
					last_y = y;
					last_z = z
				}
			}
		}
	})
});
define("./component/draw/Turntable", ["../../../lib/glue.min", "../../service/user/user", "../../service/remote/remote", "../../service/util/util"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var user = require("../../service/user/user");
	var remote = require("../../service/remote/remote");
	var util = require("../../service/util/util");
	glue.define("activity.component.draw.Turntable", {
		message: ["DRAW_AGAIN"],
		onMessage: function(name, data) {
			if (name == "DRAW_AGAIN" && this.nodes.button.attr("data-code-send") == data.code) {
				this.handler()
			}
		},
		init: function() {
			var me = this;
			if (!me.nodes.button) {
				return
			}
			me.nodes.button.one("click", me.handler.bind(me))
		},
		handler: function() {
			var me = this;
			if (!user.isLogin(me.nodes.button.attr("data-code-send"))) {
				me.nodes.button.one("click", me.handler.bind(me));
				return
			}
			glue.postMessage("LOADINGDIALOG_SHOW");
			var dataCodeSend = me.nodes.button.attr("data-code-send");
			var dataCodeGet = me.nodes.button.attr("data-code-get");
			remote.send(dataCodeSend, {}, function(data) {
				glue.postMessage("LOADINGDIALOG_HIDE");
				data.dataCodeSend = dataCodeSend;
				data.dataCodeGet = dataCodeGet;
				if (data.code == "A00000" || data.code == "Q00703") {
					var dataLevel = me.nodes.target.attr("data-level").split(",");
					var level = data.code == "Q00703" ? "0" : data.data.level;
					var index = dataLevel.indexOf(level);
					me.turntableRun({
						target: me.nodes.target,
						count: dataLevel.length,
						index: index,
						callback: function() {
							glue.postMessage("DRAW_SUCCESS", data);
							glue.postMessage("POPUPDIALOG_SHOW", data);
							me.nodes.button.one("click", me.handler.bind(me))
						}
					})
				} else {
					glue.postMessage("POPUPDIALOG_SHOW", data);
					me.nodes.button.one("click", me.handler.bind(me))
				}
			})
		},
		turntableRun: function(prizeCfg, animationCfg) {
			var me = this;
			prizeCfg = prizeCfg || {};
			var element = prizeCfg.target;
			var index = parseInt(prizeCfg.index);
			var count = parseInt(prizeCfg.count);
			if (element.length == 0 || isNaN(index) || isNaN(count) || index > count - 1 || index < 0 || count <= 0) {
				return
			}
			var offset = prizeCfg.offset ? parseInt(prizeCfg.offset) : 360 - index * 360 / count;
			if (offset > 360) {
				offset = parseInt(offset % 360)
			}
			var lastOffset = element.prop("lastOffset") || 0;
			var suffix = element.prop("suffix") || 0;
			element.prop("suffix", suffix + 1);
			animationCfg = animationCfg || {};
			var recover = animationCfg.recover;
			lastOffset = recover ? 0 : lastOffset;
			animationCfg.lastOffset = lastOffset;
			element.prop("lastOffset", offset);
			animationCfg.offset = offset;
			animationCfg.suffix = "_" + suffix;
			me.setTurntableAnimationConfig(animationCfg);
			setTimeout(function() {
				element.addClass(animationCfg.name)
			}, 0);
			setTimeout(function() {
				if (typeof prizeCfg.callback == "function") {
					prizeCfg.callback()
				}
			}, animationCfg.endTime)
		},
		setTurntableAnimationConfig: function(config) {
			var name = "h5_turntable";
			var style = util.getStyle(name);
			name += config.suffix;
			var duration = config.duration || "5s";
			var timingFunction = config.timingFunction || "ease-in-out";
			var delay = config.delay || 0;
			var last = config.last || 500;
			var offset = config.offset;
			var lastOffset = config.lastOffset;
			var count = config.count || 10;
			var animationCss = "-webkit-animation-name:" + name + ";" + "-webkit-animation-duration:" + duration + ";" + "-webkit-animation-timing-function:" + timingFunction + ";" + "-webkit-animation-delay:" + delay + ";" + "-webkit-animation-iteration-count: 1;" + "-webkit-animation-fill-mode: forwards;";
			var keyframesCss = "0% {-webkit-transform: rotate(" + lastOffset + "deg)} " + "100% {-webkit-transform: rotate(" + (360 * count + offset) + "deg)}";
			util.addRule(style, name, animationCss, keyframesCss);
			config.name = name;
			config.endTime = parseInt(duration) * 1e3 + last
		}
	})
});
define("./service/util/util", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	module.exports = glue.createService({
		createStyle: function(name) {
			var style = document.createElement("style");
			style.setAttribute("title", name);
			style.setAttribute("type", "text/css");
			glue.$("head").append(style)
		},
		getStyle: function(name) {
			var styles = document.styleSheets;
			var length = styles.length;
			for (var i = length - 1; i >= 0; i--) {
				var style = styles[i];
				if (style.title == name) {
					return style
				}
			}
			this.createStyle(name);
			return this.getStyle(name)
		},
		addRule: function(style, name, animationCss, keyframesCss) {
			style.addRule("." + name, animationCss);
			style.addRule("@-webkit-keyframes " + name, keyframesCss)
		},
		clone: function(obj) {
			var result = {};
			for (var prop in obj) {
				result[prop] = obj[prop]
			}
			return result
		}
	})
});
define("./component/draw/DrawPanel", ["../../../lib/glue.min", "../../service/user/user"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var user = require("../../service/user/user");
	glue.define("activity.component.draw.DrawPanel", {
		message: ["DRAW_SUCCESS"],
		onMessage: function(name, data) {
			if (name == "DRAW_SUCCESS") {
				this.getChance()
			}
		},
		init: function() {
			var me = this;
			if (!glue.$.cookie.get("P00001")) {
				me.nodes.chance.addClass("dn");
				me.initStatus()
			} else {
				user.getUserInfo(function(data) {
					if (data == null || !data.qiyi_vip_info) {
						me.nodes.chance.addClass("dn");
						me.initStatus()
					} else {
						me.getSign()
					}
				})
			}
		},
		getSign: function() {
			var me = this;
			glue.$.ajax({
				url: "//act.vip.iqiyi.com/marketing/query/sign/querySignIn.action?P00001=" + glue.$.cookie.get("P00001"),
				dataType: "jsonp",
				success: function(data) {
					if (data.code == "A00000") {
						var count = data.data.data.continueSignCount;
						me.initStatus(count);
						if (count > 0) {
							me.getChance()
						} else {
							me.nodes.chance.addClass("dn")
						}
					} else {
						me.initStatus();
						me.nodes.chance.addClass("dn")
					}
				},
				error: function(xhr, data) {
					me.initStatus();
					me.nodes.chance.addClass("dn")
				}
			})
		},
		getChance: function() {
			var me = this;
			glue.$.ajax({
				url: "//act.vip.iqiyi.com/query/lottery/info.action",
				data: {
					P00001: glue.$.cookie.get("P00001"),
					actionCode: me.rootElement.attr("data-actionCode")
				},
				dataType: "jsonp",
				success: function(data) {
					if (data.code == "A00000") {
						me.nodes.chance.removeClass("dn");
						me.nodes.drawCount.text(data.data.data.daysurpluschance)
					} else {
						me.nodes.chance.addClass("dn")
					}
				},
				error: function(xhr, data) {
					me.nodes.chance.addClass("dn")
				}
			})
		},
		initStatus: function(count) {
			count = parseInt(count || -1);
			var index = count % mod == 0 ? 1 : 0;
			this.nodes.prizeName.text(prizeName[index]);
			this.nodes.drawComponent.attr("data-level", dataLevel[index]);
			var name = prizeArray[index].name;
			var pic = prizeArray[index].pic;
			var gifts = this.nodes.drawComponent.find(".gift-each");
			gifts.sort(function(item1, item2) {
				if (parseInt(item1.getAttribute("order")) > parseInt(item2.getAttribute("order"))) {
					return 1
				}
				return -1
			});
			glue.$.each(gifts, function(index, item) {
				$(item).find("i").css("background-image", "url(" + pic[index] + ")");
				$(item).find("span").text(name[index])
			})
		}
	})
});
define("./component/draw/Speeddial", ["../../../lib/glue.min", "../../service/user/user", "../../service/remote/remote", "../../service/util/util"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var user = require("../../service/user/user");
	var remote = require("../../service/remote/remote");
	var util = require("../../service/util/util");
	glue.define("activity.component.draw.Speeddial", {
		message: ["DRAW_AGAIN"],
		onMessage: function(name, data) {
			if (name == "DRAW_AGAIN" && this.nodes.button.attr("data-code-send") == data.code) {
				this.handler()
			}
		},
		init: function() {
			var me = this;
			if (!me.nodes.button) {
				return
			}
			me.nodes.button.one("click", me.handler.bind(me))
		},
		handler: function() {
			var me = this;
			if (!user.isLogin(me.nodes.button.attr("data-code-send"))) {
				me.nodes.button.one("click", me.handler.bind(me));
				return
			}
			glue.postMessage("LOADINGDIALOG_SHOW");
			var dataCodeSend = me.nodes.button.attr("data-code-send");
			var dataCodeGet = me.nodes.button.attr("data-code-get");
			remote.send(dataCodeSend, {}, function(data) {
				glue.postMessage("LOADINGDIALOG_HIDE");
				data.dataCodeSend = dataCodeSend;
				data.dataCodeGet = dataCodeGet;
				if (data.code == "A00000" || data.code == "Q00703") {
					var dataLevel = me.rootElement.attr("data-level").split(",");
					var level = data.code == "Q00703" ? "0" : data.data.level;
					var index = dataLevel.indexOf(level);
					me.speeddialRun({
						moveCls: "selected",
						doneCls: "done",
						target: me.rootElement.find(".gift-each"),
						count: dataLevel.length,
						index: index,
						callback: function() {
							glue.postMessage("DRAW_SUCCESS", data);
							glue.postMessage("POPUPDIALOG_SHOW", data);
							me.nodes.button.one("click", me.handler.bind(me))
						}
					})
				} else {
					glue.postMessage("POPUPDIALOG_SHOW", data);
					me.nodes.button.one("click", me.handler.bind(me))
				}
			})
		},
		speeddialRun: function(prizeCfg, animationCfg) {
			window._lastIndex = window._lastIndex || 0;
			var prizeCfg = prizeCfg || {};
			var items = prizeCfg.target;
			var count = parseInt(prizeCfg.count);
			var prizeIdx = parseInt(prizeCfg.index);
			if (items.length == 0 || isNaN(count) || isNaN(prizeIdx) || prizeIdx < 0) {
				return
			}
			animationCfg = animationCfg || {};
			this.setSpeeddialAnimationConfig(animationCfg);
			this.sortSpeeddialItems(items);
			var index = window._lastIndex;
			if (animationCfg.recover) {
				index = count
			} else {
				var idx = count - index;
				if (idx == count) {
					index = count
				} else {
					index++
				}
			}
			var total = count * animationCfg.count + prizeIdx + 1 + (count - index);
			var timeouts = null;
			if (animationCfg.liner) {
				timeouts = animationCfg.delay
			} else {
				timeouts = this.getSpeeddialTimeouts(total, animationCfg.delay)
			}
			var num = 0;
			$(items[window._lastIndex]).removeClass(prizeCfg.moveCls + " " + prizeCfg.doneCls);
			for (var i = 0; i < total; i++) {
				setTimeout(function() {
					if (index > 0) {
						$(items[index - 1]).removeClass(prizeCfg.moveCls)
					}
					if (index > count - 1) {
						index = 0
					}
					$(items[index++]).addClass(prizeCfg.moveCls);
					if (++num == total) {
						index--;
						$(items[index]).addClass(prizeCfg.doneCls);
						window._lastIndex = index;
						if ($.isFunction(prizeCfg.callback)) {
							setTimeout(function() {
								prizeCfg.callback()
							}, animationCfg.last)
						}
					}
				}, animationCfg.liner ? i * timeouts : timeouts[i])
			}
		},
		setSpeeddialAnimationConfig: function(config) {
			config.delay = parseInt(this.rootElement.attr("data-delay") || 200);
			config.count = parseInt(this.rootElement.attr("data-count") || 10);
			config.last = parseInt(this.rootElement.attr("data-last") || 500);
			config.liner = this.rootElement.attr("data-liner") == "true" || false;
			config.recover = this.rootElement.attr("data-recover") == "true" || false
		},
		sortSpeeddialItems: function(items) {
			items.sort(function(item1, item2) {
				if (parseInt(item1.getAttribute("order")) > parseInt(item2.getAttribute("order"))) {
					return 1
				}
				return -1
			})
		},
		getSpeeddialTimeouts: function(total, timeout) {
			var index = 0;
			var base = Math.floor(total / 2);
			var step = (timeout / total).toFixed(2);
			var time = 0;
			var timedifs = [];
			var last = 0;
			var length = 0;
			var timeouts = [];
			for (var i = 0; i < total; i++) {
				if (i < base) {
					time = i * (timeout - i * step);
					timedifs.push(time - last);
					last = time
				} else if (i == base) {
					time = last;
					if (base % 2 != 0) {
						time = i * (timeout - i * step);
						timedifs.push(time - last)
					}
					timedifs.push(0);
					length = timedifs.length
				} else {
					time += timedifs[length + base - i]
				}
				timeouts.push(time)
			}
			return timeouts
		}
	})
});
define("./component/draw/Slotmachines", ["../../../lib/glue.min", "../../service/user/user", "../../service/remote/remote", "../../service/util/util"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var user = require("../../service/user/user");
	var remote = require("../../service/remote/remote");
	var util = require("../../service/util/util");
	glue.define("activity.component.draw.Slotmachines", {
		message: ["DRAW_AGAIN"],
		onMessage: function(name, data) {
			if (name == "DRAW_AGAIN" && this.nodes.button.attr("data-code-send") == data.code) {
				this.handler()
			}
		},
		init: function() {
			var me = this;
			if (!me.nodes.button) {
				return
			}
			me.nodes.button.one("click", me.handler.bind(me))
		},
		handler: function() {
			var me = this;
			if (!user.isLogin(me.nodes.button.attr("data-code-send"))) {
				me.nodes.button.one("click", me.handler.bind(me));
				return
			}
			glue.postMessage("LOADINGDIALOG_SHOW");
			var dataCodeSend = me.nodes.button.attr("data-code-send");
			var dataCodeGet = me.nodes.button.attr("data-code-get");
			remote.send(dataCodeSend, {}, function(data) {
				glue.postMessage("LOADINGDIALOG_HIDE");
				data.dataCodeSend = dataCodeSend;
				data.dataCodeGet = dataCodeGet;
				if (data.code == "A00000" || data.code == "Q00703") {
					var dataLevel = me.nodes.target.attr("data-level").split(",");
					var level = data.code == "Q00703" ? "0" : data.data.level;
					var index = dataLevel.indexOf(level);
					var target = me.nodes.target.find("[data-item]");
					me.slotmachinesRun({
						target: target,
						count: dataLevel.length,
						index: me.getIdxArray(index, target.length, dataLevel.length),
						callback: function() {
							glue.postMessage("DRAW_SUCCESS", data);
							glue.postMessage("POPUPDIALOG_SHOW", data);
							me.nodes.button.one("click", me.handler.bind(me))
						}
					})
				} else {
					glue.postMessage("POPUPDIALOG_SHOW", data);
					me.nodes.button.one("click", me.handler.bind(me))
				}
			})
		},
		getIdxArray: function(index, length, total) {
			var result = [];
			if (index >= 0) {
				while (length--) {
					result.push(index)
				}
			} else {
				var tmp = [];
				while (total--) {
					tmp.push(total)
				}
				while (length--) {
					total = tmp.length;
					var index = Math.floor(total * Math.random());
					result.push(tmp[index]);
					tmp.splice(index, 1)
				}
			}
			return result
		},
		slotmachinesRun: function(prizeCfg, animationCfg) {
			var me = this;
			prizeCfg = prizeCfg || {};
			var elements = prizeCfg.target;
			var index = prizeCfg.index;
			var count = parseInt(prizeCfg.count);
			if (elements.length != index.length || isNaN(count) || count <= 0) {
				return
			}
			var endTime = 0;
			$.each(elements, function(i, el) {
				el = glue.$(el);
				var idx = index[i];
				var height = el.height();
				var total = height * count;
				var offset = (count - idx) * height;
				if (offset >= total) {
					offset -= total
				}
				var lastOffset = el.prop("lastOffset") || 0;
				var suffix = el.prop("suffix") || 0;
				el.prop("suffix", suffix + 1);
				var cfg = util.clone(animationCfg || {});
				var recover = cfg.recover;
				lastOffset = recover ? 0 : lastOffset;
				cfg.lastOffset = lastOffset;
				el.prop("lastOffset", offset);
				cfg.offset = offset;
				cfg.suffix = "_" + el.attr("id") + "_" + suffix;
				cfg.total = total;
				me.setSlotmachinesAnimationConfig(cfg);
				endTime = cfg.endTime + i * cfg.between;
				setTimeout(function() {
					el.addClass(cfg.name)
				}, i * cfg.between)
			});
			setTimeout(function() {
				if ($.isFunction(prizeCfg.callback)) {
					prizeCfg.callback()
				}
			}, endTime)
		},
		setSlotmachinesAnimationConfig: function(config) {
			var name = "h5_slotmachines";
			var style = util.getStyle(name);
			name += config.suffix;
			var duration = config.duration || "5s";
			var timingFunction = config.timingFunction || "ease-in-out";
			var delay = config.delay || 0;
			var last = config.last || 500;
			var offset = config.offset;
			var lastOffset = config.lastOffset;
			var count = config.count || 10;
			var animationCss = "-webkit-animation-name:" + name + ";" + "-webkit-animation-duration:" + duration + ";" + "-webkit-animation-timing-function:" + timingFunction + ";" + "-webkit-animation-delay:" + delay + ";" + "-webkit-animation-iteration-count: 1;" + "-webkit-animation-fill-mode: forwards;";
			var keyframesCss = "0% {background-position-y:" + lastOffset + "px} " + "100% {background-position-y:" + (config.total * count + offset) + "px}";
			util.addRule(style, name, animationCss, keyframesCss);
			config.name = name;
			config.between = config.between || 500;
			config.endTime = parseInt(duration) * 1e3 + last
		}
	})
});
define("./component/button/InfoButton", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.button.InfoButton", {
		init: function() {
			var me = this;
			var root = me.rootElement;
			root.one("click", me.handler.bind(me))
		},
		handler: function() {
			var me = this;
			var root = me.rootElement;
			var data = {
				code: "B00000",
				dataCodeSend: root.attr("data-code-send"),
				dataCodeGet: root.attr("data-code-get")
			};
			glue.postMessage("POPUPDIALOG_SHOW", data);
			root.one("click", me.handler.bind(me))
		}
	})
});
define("./component/button/ChargeButton", ["../../../lib/glue.min", "../../service/charge/charge"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var charge = require("../../service/charge/charge");
	glue.define("activity.component.button.ChargeButton", {
		init: function() {
			var me = this;
			var root = me.rootElement;
			root.one("click", me.handler.bind(me))
		},
		handler: function() {
			var me = this;
			var root = me.rootElement;
			charge.doCharge(root.attr("data-default-url"), root.attr("data-param") || "");
			root.one("click", me.handler.bind(me))
		}
	})
});
define("./component/button/ShareButton", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.button.ShareButton", {
		init: function() {
			var me = this;
			var root = me.rootElement;
			if (navigator.userAgent.toLowerCase().indexOf("iqiyi") < 0) {
				root.addClass("dn");
				return
			}
			root.one("click", me.handler.bind(me))
		},
		handler: function() {
			var me = this;
			var root = me.rootElement;
			me.doShare(root);
			root.one("click", me.handler.bind(me))
		},
		doShare: function(root) {
			var uAgent = navigator.userAgent.toLowerCase();
			if (uAgent.match(/iphone/i) == "iphone" || uAgent.match(/ipad/i) == "ipad" || uAgent.match(/android/i) == "android") {
				var url = root.attr("glue-share-url") || window.location.href;
				var urls = url.split("#");
				url = urls[0] + (urls[0].lastIndexOf("?") >= 0 ? "&" : "?") + "share=iqiyi" + (urls.length > 1 && glue.$.trim(urls[1]).length > 0 ? "#" + urls[1] : "");
				var data = {
					title: root.attr("glue-share-title") || document.title,
					text: root.attr("glue-share-content") || document.title,
					url: url,
					pic: root.attr("glue-share-image") || glue.$("#wx").attr("src") || "//static.iqiyi.com/common/20151111/h5_default_share.jpg"
				};
				data = encodeURIComponent(JSON.stringify(data));
				url = "iqiyi://share?p=wx&t=1&d=" + data;
				window.location.href = url
			}
		}
	})
});
define("./component/button/LoginGroup", ["../../../lib/glue.min", "../../service/user/user"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var user = require("../../service/user/user");
	glue.define("activity.component.button.LoginGroup", {
		init: function() {
			var me = this;
			var loginTitle = me.nodes.loginTitle;
			var loginButton = me.nodes.loginButton;
			var logoutTitle = me.nodes.logoutTitle;
			var logoutButton = me.nodes.logoutButton;
			var backButton = me.nodes.backButton;
			var ua = window.navigator.userAgent;
			if (ua.indexOf("IqiyiApp") >= 0) {
				me.rootElement.addClass("dn");
				return
			} else {
				me.rootElement.removeClass("dn")
			}
			loginButton.one("click", me.login.bind(me));
			logoutButton.one("click", me.logout.bind(me));
			backButton.one("click", me.back.bind(me));
			if (glue.$.cookie.get("P00001")) {
				glue.$.ajax({
					type: "POST",
					url: "https://passport.iqiyi.com/apis/user/info.action?authcookie=" + glue.$.cookie.get("P00001"),
					dataType: "json",
					crossDomain: true,
					beforeSend: function(xhr, settings) {
						xhr.withCredentials = true
					},
					data: window.deviceInfo.qyID || null,
					success: function(data) {
						if (data.code == "A00000") {
							loginTitle.css("display", "none");
							loginButton.css("display", "none");
							var title = "";
							var P00002 = glue.$.cookie.get("P00002");
							if (P00002) {
								title += JSON.parse(P00002).nickname
							}
							logoutTitle.text(title).css("display", "block");
							logoutButton.css("display", "block")
						} else {
							loginTitle.css("display", "block");
							loginButton.css("display", "block");
							logoutTitle.css("display", "none");
							logoutButton.css("display", "none")
						}
					},
					error: function(xhr, data) {}
				})
			} else {
				loginTitle.css("display", "block");
				loginButton.css("display", "block");
				logoutTitle.css("display", "none");
				logoutButton.css("display", "none")
			}
		},
		login: function() {
			var me = this;
			var loginButton = me.nodes.loginButton;
			loginButton.one("click", me.login.bind(me));
			user.login()
		},
		logout: function() {
			user.logout()
		},
		back: function() {
			if (window.history.length <= 1) {
				window.location.href = "//m.iqiyi.com/vip/"
			}
			var me = this;
			var backButton = me.nodes.backButton;
			backButton.one("click", me.back.bind(me));
			window.history.back()
		}
	})
});
define("./component/button/ShowAllGroup", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.button.ShowAllGroup", {
		init: function() {
			var me = this;
			var showAllButton = me.nodes.showAllButton;
			showAllButton.one("click", me.handler.bind(me))
		},
		handler: function() {
			var me = this;
			var root = me.rootElement;
			if (root.hasClass("ticket_namelist_all")) {
				root.removeClass("ticket_namelist_all")
			} else {
				root.addClass("ticket_namelist_all")
			}
			var showAllButton = me.nodes.showAllButton;
			showAllButton.one("click", me.handler.bind(me))
		}
	})
});
define("./component/carousel/Carousel", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.carousel.Carousel", {
		init: function() {
			var me = this;
			var root = me.rootElement;
			root.ul = root.find("li");
			root.ul.css({
				position: "absolute",
				top: 0
			});
			root.ul_length = root.ul.length;
			if (root.ul_length <= 1) {
				$(root.ul[0]).css("left", "0px");
				me.nodes.scrollFocus && me.nodes.scrollFocus.hide();
				return (me.nodes.prev_btn && me.nodes.prev_btn.css("display", "none")) & (me.nodes.next_btn && me.nodes.next_btn.css("display", "none"))
			}
			root.ul_width = root.width();
			root.ul_index = 0;
			root.lock = false;
			root.duration = root.attr("data-duration") || 2500;
			root.animeDuration = root.attr("data-anime-duration") || 500;
			if (me.nodes.scrollFocus) {
				root.scrollFocus = me.nodes.scrollFocus.children()
			}
			$(root.ul).css("left", root.ul_width + "px");
			$(root.ul[0]).css("left", "0px");
			$(root.ul[root.ul_length - 1]).css("left", "-" + root.ul_width + "px");
			me.nodes.prev_btn && me.nodes.prev_btn.on("click", function() {
				if (!root.lock) {
					me.turnLeft(root)
				}
			});
			me.nodes.next_btn && me.nodes.next_btn.on("click", function() {
				if (!root.lock) {
					me.turnRight(root)
				}
			});
			if (root.attr("data-autoplay") != "no") {
				var timeHandler = function() {
						if (!root.lock) {
							me.turnRight(root)
						}
						setTimeout(timeHandler, root.duration)
					};
				setTimeout(timeHandler, root.duration)
			} else {
				$(root).on("touchstart", function(e) {
					e.preventDefault()
				});
				$(root).swipeLeft(function() {
					if (!root.lock) {
						me.turnRight(root)
					}
				});
				$(root).swipeRight(function() {
					if (!root.lock) {
						me.turnLeft(root)
					}
				});
				root.ul.find("a").on("tap", function(e) {
					e.preventDefault();
					e.stopPropagation();
					var target = e.currentTarget;
					var url = $(target).attr("href");
					window.location.href = url
				})
			}
		},
		turnLeft: function(root) {
			root.lock = true;
			root.ul_index = root.ul_index - 1 + root.ul_length;
			$(root.ul).css("transition", "none");
			if (root.ul_length === 2) {
				$(root.ul[root.ul_index % root.ul_length]).css({
					"z-index": -1,
					left: "-" + root.ul_width + "px"
				})
			} else {
				var ele = $(root.ul[(root.ul_index - 1) % root.ul_length]);
				ele.css({
					"z-index": -1
				});
				setTimeout(function() {
					ele.css({
						left: "-" + root.ul_width + "px"
					})
				}, 100)
			}
			$(root.ul[(root.ul_index + 1) % root.ul_length]).animate({
				left: root.ul_width
			}, root.animeDuration);
			$(root.ul[root.ul_index % root.ul_length]).animate({
				left: 0
			}, {
				duration: root.animeDuration,
				complete: function() {
					$(root.ul).css("z-index", 0);
					root.lock = false
				}
			});
			root.ul_index %= root.ul_length;
			if (root.scrollFocus) {
				root.scrollFocus.removeClass("selected");
				root.scrollFocus.eq(root.ul_index).addClass("selected")
			}
		},
		turnRight: function(root) {
			root.lock = true;
			root.ul_index++;
			$(root.ul).css("transition", "none");
			if (root.ul_length === 2) {
				$(root.ul[root.ul_index % root.ul_length]).css({
					"z-index": -1,
					left: root.ul_width + "px"
				})
			} else {
				var ele = $(root.ul[(root.ul_index + 1) % root.ul_length]);
				ele.css({
					"z-index": -1
				});
				setTimeout(function() {
					ele.css({
						left: root.ul_width + "px"
					})
				}, 100)
			}
			$(root.ul[(root.ul_index - 1) % root.ul_length]).animate({
				left: -root.ul_width
			}, root.animeDuration);
			$(root.ul[root.ul_index % root.ul_length]).animate({
				left: 0
			}, {
				duration: root.animeDuration,
				complete: function() {
					$(root.ul).css("z-index", 0);
					root.lock = false
				}
			});
			root.ul_index %= root.ul_length;
			if (root.scrollFocus) {
				root.scrollFocus.removeClass("selected");
				root.scrollFocus.eq(root.ul_index).addClass("selected")
			}
		}
	})
});
define("./component/carousel/PictureViewer", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.carousel.PictureViewer", {
		init: function() {
			var me = this;
			var root = me.rootElement;
			root.ul = root.find("ul li");
			root.ul_length = root.ul.length;
			root.ul_index = 1;
			root.lock = false;
			root.animeDuration = root.attr("data-anime-duration") || 500;
			if (me.nodes.picTitle) {
				root.picTitles = me.nodes.picTitle.children();
				root.picTitles.removeClass("selected");
				root.picTitles.eq(1).addClass("selected")
			}
			if (root.ul_length > 2) {
				$(root.ul).each(function(i, v) {
					if (i == 0) {
						var width = $(v).width(),
							position = $(v).position(),
							left = position.left,
							paddingTop = parseFloat($(v).css("padding-top"));
						root.leftPosition = '"width":' + width + ',"padding-top":' + paddingTop + ',"left":' + left;
						root.backPosition = '"width":' + width + ',"padding-top":' + paddingTop;
						var val = JSON.parse("{" + root.leftPosition + ',"z-index":2, "transform" : "translate(0, 0)", "-webkit-transform" : "translate(0, 0)"}');
						$(v).css(val)
					} else if (i == 1) {
						var width = $(v).width(),
							position = $(v).position(),
							left = position.left,
							paddingTop = parseFloat($(v).css("padding-top"));
						root.middlePosition = '"width":' + width + ',"padding-top":' + paddingTop + ',"left":' + left;
						root.backPosition = root.backPosition + ',"left":' + left;
						var val = JSON.parse("{" + root.middlePosition + ',"z-index":3, "transform" : "translate(0, 0)", "-webkit-transform" : "translate(0, 0)"}');
						$(v).css(val)
					} else if (i == 2) {
						var width = $(v).width(),
							position = $(v).position(),
							left = position.left,
							paddingTop = parseFloat($(v).css("padding-top"));
						root.rightPosition = '"width":' + width + ',"padding-top":' + paddingTop + ',"left":' + left;
						var val = JSON.parse("{" + root.rightPosition + ',"z-index":2, "transform" : "translate(0, 0)", "-webkit-transform" : "translate(0, 0)"}');
						$(v).css(val)
					} else {
						var val = JSON.parse("{" + root.backPosition + ',"z-index":1, "transform" : "translate(0, 0)", "-webkit-transform" : "translate(0, 0)"}');
						$(v).css(val)
					}
				});
				$(root).on("touchstart", function(e) {
					e.preventDefault()
				});
				$(root).swipeLeft(function() {
					if (!root.lock) {
						me.getNext(root)
					}
				});
				$(root).swipeRight(function() {
					if (!root.lock) {
						me.getPrevious(root)
					}
				});
				root.ul.find("a").on("tap", function(e) {
					e.preventDefault();
					e.stopPropagation();
					var target = e.currentTarget;
					var url = $(target).attr("href");
					window.location.href = url
				})
			}
		},
		getPrevious: function(root) {
			var L = root.ul_length;
			root.lock = true;
			$(root.ul[root.ul_index]).css(JSON.parse("{" + root.rightPosition + ',"z-index":2, "-webkit-transition" : "all 1s"}'));
			root.ul_index = (root.ul_index - 1 + L) % L;
			$(root.ul[root.ul_index % L]).css(JSON.parse("{" + root.middlePosition + ',"z-index":3, "-webkit-transition" : "all 1s"}'));
			$(root.ul[(root.ul_index + 2) % L]).css(JSON.parse("{" + root.backPosition + ',"z-index":1, "-webkit-transition" : "all 1s"}'));
			$(root.ul[(root.ul_index - 1 + L) % L]).css(JSON.parse("{" + root.leftPosition + ',"z-index":2, "-webkit-transition" : "all 1s"}'));
			if (root.picTitles) {
				root.picTitles.removeClass("selected");
				root.picTitles.eq(root.ul_index).addClass("selected")
			}
			root.lock = false
		},
		getNext: function(root) {
			var L = root.ul_length;
			root.lock = true;
			$(root.ul[root.ul_index]).css(JSON.parse("{" + root.leftPosition + ',"z-index":2, "-webkit-transition" : "all 1s"}'));
			root.ul_index = (root.ul_index + 1) % L;
			$(root.ul[root.ul_index % L]).css(JSON.parse("{" + root.middlePosition + ',"z-index":3, "-webkit-transition" : "all 1s"}'));
			$(root.ul[(root.ul_index - 2 + L) % L]).css(JSON.parse("{" + root.backPosition + ',"z-index":1, "-webkit-transition" : "all 1s"}'));
			$(root.ul[(root.ul_index + 1) % L]).css(JSON.parse("{" + root.rightPosition + ',"z-index":2, "-webkit-transition" : "all 1s"}'));
			if (root.picTitles) {
				root.picTitles.removeClass("selected");
				root.picTitles.eq(root.ul_index).addClass("selected")
			}
			root.lock = false
		}
	})
});
define("./component/carousel/Prizer", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.carousel.Prizer", {
		init: function() {
			var me = this;
			glue.$.ajax({
				url: "//act.vip.iqiyi.com/query/gift/win-users.action",
				data: {
					actionCode: this.rootElement.attr("data-actionCode"),
					interfaceCode: this.rootElement.attr("data-interfaceCode")
				},
				dataType: "jsonp",
				success: function(data) {
					if (data.code == "A00000") {
						me.render(data.data.data.users)
					} else {
						me.render()
					}
				},
				error: function(xhr, data) {
					me.render()
				}
			})
		},
		render: function(data) {
			data = data || [];
			var length = data.length;
			if (length == 0) {
				this.nodes.noPrizer.removeClass("dn");
				this.nodes.prizer.addClass("dn")
			} else {
				var tpl = this.nodes.tpl.text();
				var html = "";
				for (var i = 0; i < length; i++) {
					var item = data[i];
					html += tpl.replace("{username}", item.username).replace("{gift}", item.gift)
				}
				this.nodes.prizer.append(html);
				this.nodes.prizer.removeClass("dn");
				this.nodes.noPrizer.addClass("dn");
				var count = parseInt(this.nodes.prizer.attr("data-view-count") || 4);
				if (length > count) {
					this.animate()
				}
			}
		},
		animate: function() {
			var me = this;
			var moveline = me.nodes.prizer.find("li:first");
			var lineheight = moveline.height();
			var marginTop = 0;
			setInterval(function() {
				marginTop--;
				moveline.animate({
					marginTop: marginTop + "px"
				}, 0, function() {
					var step = Math.abs(parseInt(moveline.css("margin-top")));
					if (step >= lineheight) {
						moveline.css("marginTop", 0).appendTo(me.nodes.prizer);
						marginTop = 0;
						moveline = me.nodes.prizer.find("li:first")
					}
				})
			}, 50)
		}
	})
});
define("./component/carousel/CommonPrizer", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.carousel.CommonPrizer", {
		init: function() {
			var me = this;
			glue.$.ajax({
				url: "//act.vip.iqiyi.com/query/gift/win-users.action",
				data: {
					actionCode: this.rootElement.attr("data-actionCode"),
					interfaceCode: this.rootElement.attr("data-interfaceCode")
				},
				dataType: "jsonp",
				success: function(data) {
					if (data.code == "A00000") {
						me.render(data.data.data.users)
					}
				}
			})
		},
		render: function(data) {
			data = data || [];
			var length = data.length;
			if (length > 0) {
				var count = parseInt(this.rootElement.attr("data-count") || 100);
				var tpl = this.nodes.tpl.text();
				var html = [];
				for (var i = 0; i < length && i < count; i++) {
					var item = data[i];
					html.push(tpl.replace("{icon}", item.icon).replace("{username}", item.username).replace("{gift}", item.gift))
				}
				this.nodes.prizer.append(html.join(""));
				count = parseInt(this.nodes.prizer.attr("data-view-count") || 3);
				if (length > count) {
					this.animate()
				}
			}
		},
		animate: function() {
			var me = this;
			var animateTime = parseInt(me.rootElement.attr("data-animateTime") || 500);
			var intervalTime = parseInt(me.rootElement.attr("data-intervalTime") || 1500);
			var moveItem = me.nodes.prizer.find("li:first");
			var width = moveItem.width();
			var _marginLeft = parseInt(moveItem.css("marginLeft"));
			var marginLeft = _marginLeft;
			setInterval(function() {
				marginLeft -= width;
				moveItem.animate({
					marginLeft: marginLeft + "px"
				}, 500, function() {
					moveItem.css("marginLeft", _marginLeft).appendTo(me.nodes.prizer);
					marginLeft = _marginLeft;
					moveItem = me.nodes.prizer.find("li:first")
				})
			}, 1500)
		}
	})
});
define("./component/date/Countdown", ["../../../lib/glue.min"], function(require, exports, module) {
	require("../../../lib/glue.min");
	glue.define("activity.component.date.Countdown", {
		init: function() {
			var me = this;
			var deadTime = parseInt(me.rootElement.attr("data-deadline"));
			if (isNaN(deadTime)) {
				return
			}
			deadTime = (deadTime - new Date().getTime()) / 1e3;
			if (deadTime <= 0) {
				return
			}
			var hours = Math.floor(deadTime / 3600);
			var minutes = Math.floor((deadTime - hours * 3600) / 60);
			var seconds = Math.floor(deadTime - hours * 3600 - minutes * 60);
			me.task = setInterval(function() {
				if (hours == 0 && minutes == 0 && seconds == 0) {
					clearInterval(me.task);
					return
				}
				if (seconds == 0) {
					seconds = 59;
					if (minutes == 0) {
						minutes = 59;
						if (hours > 0) {
							hours--
						}
					} else {
						minutes--
					}
				} else {
					seconds--
				}
				me.nodes.hourH.text(Math.floor(hours / 10));
				me.nodes.hourL.text(hours % 10);
				me.nodes.minuteH.text(Math.floor(minutes / 10));
				me.nodes.minuteL.text(minutes % 10);
				me.nodes.secondH.text(Math.floor(seconds / 10));
				me.nodes.secondL.text(seconds % 10)
			}, 1e3)
		}
	})
});
define("./component/composite/PhoneForm", ["../../../lib/glue.min", "../../service/remote/remote", "../../service/user/user"], function(require, exports, module) {
	require("../../../lib/glue.min");
	var remote = require("../../service/remote/remote");
	var user = require("../../service/user/user");
	glue.define("activity.component.composite.PhoneForm", {
		init: function() {
			var me = this;
			user.getUserInfo(function(data) {
				if (data != null && me.rootElement.attr("glue-behavior") && me.rootElement.attr("glue-behavior").indexOf("activity.behavior.Dialog") >= 0) {
					me.nodes.phone.val(data.userinfo.phone || "")
				}
				me.nodes.button.on("click", function() {
					me.submit()
				})
			});
			if (me.nodes.clear) {
				me.nodes.clear.on("click", function() {
					me.nodes.phone.val("")
				})
			}
		},
		submit: function() {
			var me = this;
			this.nodes.error.removeClass("show");
			var phone = this.nodes.phone.val();
			if (phone == "") {
				this.nodes.error.text("您还没有输入手机号哦");
				this.nodes.error.addClass("show");
				return
			} else if (phone.length != 11 || !phone.match(/^1[34578]\d{9}$/)) {
				this.nodes.error.text("您输入的手机号码不正确哦");
				this.nodes.error.addClass("show");
				return
			}
			var code = this.nodes.button.attr("data-code");
			remote.send({
				url: "//act.vip.iqiyi.com/api/process-jsonp.action",
				interfaceCode: code
			}, {
				mobile: phone,
				uid: phone
			}, function(data) {
				data.dataCodeSend = code;
				glue.postMessage("MASK_HIDE");
				glue.postMessage("PhoneFormDialogHide", me.rootElement);
				glue.postMessage("POPUPDIALOG_SHOW", data)
			})
		}
	})
});
define("./behavior/NoLogin", ["../../lib/glue.min"], function(require, exports, module) {
	require("../../lib/glue.min");
	glue.createBehavior("activity.behavior.NoLogin", {
		init: function() {
			this.shouldLogin = false
		}
	})
});
define("./behavior/Reserve", ["../../lib/glue.min"], function(require, exports, module) {
	require("../../lib/glue.min");
	glue.createBehavior("activity.behavior.Reserve", {
		init: function() {
			var me = this;
			me.shouldLogin = false;
			var root = me.rootElement;
			root.off("click", me._handler);
			root.on("click", function() {
				var el = glue.$('[glue-component="activity.component.composite.PhoneForm"][data-target="' + root.attr("data-target") + '"]');
				glue.postMessage("PhoneFormDialogShow", el)
			})
		}
	})
});
define("./behavior/Dialog", ["../../lib/glue.min"], function(require, exports, module) {
	require("../../lib/glue.min");
	glue.createBehavior("activity.behavior.Dialog", {
		message: ["PhoneFormDialogShow", "PhoneFormDialogHide"],
		onMessage: function(name, el) {
			if (!el.attr("glue-behavior") || el.attr("glue-behavior").indexOf("activity.behavior.Dialog") < 0) {
				return
			}
			if (name == "PhoneFormDialogShow") {
				el.css("display", "block")
			} else if (name == "PhoneFormDialogHide") {
				el.css("display", "none")
			}
		},
		init: function() {
			var me = this;
			me.rootElement.find("a").on("click", function(e) {
				if ($(e.target).hasClass("ff-close")) {
					me.rootElement.css("display", "none")
				}
			})
		}
	})
});